<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
       "http://www.w3.org/TR/html4/loose.dtd">

<html lang="ja">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<link rel="stylesheet" type="text/css" href="css/style.css">
<title>（第７回）C言語の文字入出力、条件分岐とUNIXのリダイレクション</title>
</head>
<body>
<A HREF="unix06.html">PREVIOUS</A> |
<A HREF="index.html">TOP</A> |
<A HREF="unix08.html">NEXT</A>

<h2>（第７回）C言語の文字入出力、条件分岐とUNIXのリダイレクション</h2>

<h3>
今日の目標
</h3>
<ol>
<li>
今回の課題では、
UNIXの機能の一つであるリダイレクションを用いて
プログラムと入出力データとのやりとりを行います。
<li>
C言語でUNIXの入出力リダイレクションの機能が使うため、
標準入出力をつかうC言語プログラムを作成します。 
</ol>

<h3>
標準入出力・リダイレクト・パイプ
</h3>

<h4>
ＵＮＩＸのコマンド
</h4>
<p>
　ＵＮＩＸのコマンドには、ファイル名を指定して、その内容をさまざまに加工してその結果を出力するものが多くあります<br>
例えば、ファイルの内容を並べ替えるsort　コマンドなどがその代表です．<br>

このコマンドは、
</p>
<ol>
 <li>指定されたファイルから入力を行い</li>
 <li>内容を順番に並べ替え</li>
 <li>結果を画面に出力する</li>
</ol>
<p>
というものです．<br>
　一般にＵＮＩＸのコマンドの多くは、このように、「何か入力を読み込み、それを加工して出力する．」ものです．<br>
この様に、入力を加工して出力する形式のコマンドをフィルタ型コマンドといいます．
</p>

<p>
　unixのフィルタコマンドは、指定のファイルから入力を受け、加工の結果を画面の出力しますが、実は、unixにおいては、画面やキーボードなどという入出力装置も、一種のファイルとして扱います．<br>
　つまり、unixのコマンドは、全ての入力を、ファイルから行い、全ての出力をファイルに対して行うように作られているのです．<br>
キーボードからの入力は、一種の入力ファイルであり「標準入力」という名前のファイルからの入力とみなされます．画面への出力も、「標準出力」というファイルへの出力とみなすのです．そして、コマンドの引数として入力ファイルの名前が指定されたときには、そのファイルからの入力が行われ、引数が指定されないときには、キーボードから入力が行われるわけです．また、コマンドの引数として出力ファイルの名前が指定されたときにはそのファイルに出力が行われ、指定されないときには、画面に出力が行われるのです．unixにおいては、このように、ファイル名が指定されない場合に入力の行われるファイルのことを「標準入力」といい、出力ファイルのことを「標準出力」といいます． 
</p>

<ul>
<li>標準入力　　　　--　コマンドに与えられる入力．通常はキーボードからの入力</li>
<li>標準出力　　　　--　コマンドからの出力. 通常はディスプレイ画面．</li>
<li>標準エラー出力　--　コマンドからのエラーメッセージを出力する.通常はディスプレイ画面.</li>
</ul>
<p>
(エラーが起こった場合のメッセージが、通常の標準出力と一緒に、ファイルなどに出力されてしまうと,その場でエラーの発生が分からないなど、不都合があるので、エラー出力だけは標準出力とは独立の出力として扱います.)
</p>

<h4>
リダイレクト
</h4>
<p>
　リダイレクトとは「入出力の切り替え」という意味です．これは、標準入力を、キーボード以外のファイルに指定したり、標準出力をディスプレイ以外のファイルに指定したりすることです.<br>

　次の ls コマンドを用いてこの動作を説明します．ls コマンドはファイルリストを標準出力に出力しますが,なにも指定しなければ標準出力はディスプレイ画面なので、ファイルリストがそのまま画面に出力されます. 
この出力を、ファイルに切り替えるには次のようにします． 
</p>
<pre>
% ls > list1
</pre>
<p>
このとき、画面には何も出力されず、代わりに list1 という名前のファイルが出来上がります．試しにこのファイルの内容を cat コマンドで表示してみると、ファイルリストが画面に出力されます。<br>

このように、画面に出力されるはずのものが、ファイルになります．ここで使用した記号　<em>＞</em>　が、「出力のリダイレクト」記号です．この記号は、標準出力への出力を、右側に指定した名前のファイルに切り替える記号です． 

<h4>
パイプライン処理
</h4>
<p>
　リダイレクトを用いて結果をファイルにすることができますが、さらに、そのファイルに手を加えたい場合があります．　例えば、ファイルを並べ換え、その結果を１画面ずつに区切って出力するような場合には、次のようにすればできます。
</p>

<pre>
% sort file1 > tmp1
% less < tmp1
</pre>
<p>
ここで、 tmp1 というファイルは、sort の結果を一時的に保存するのに使用されている中間ファイルであって、それ以外の目的には使用されていませんから、終わってしまえば不要となるものです．　ここでの動作を整理してみると、sort コマンドは、結果を標準出力に出力し、 less コマンドは、標準入力から入力を行っています．そこで、標準出力の結果をいったんファイルにするのではなく、直接に標準出力の出力を次のコマンドに送ってやれば、中間ファイルは不要になります．　このような役割を果たすのが、パイプライン処理です．次のようにすると、中間ファイルを作ること無く、sort の結果を less の入力とすることができます． 
</p>

<pre>
% sort  file1 | less
</pre>
<p>
  "|"　記号は、左側のコマンドの標準出力を、右側のコマンドの標準入力に流すという動作を行います．

　つまり、sort の結果は、右側にある　"|" に受け渡され、画面に出力される代わりに、次のコマンドの入力に与えられます．
　一方　less コマンドは左側に "|" があるために、標準入力からの入力を、キーボードやファイルからでなく、パイプラインから受け取ります．
　このような連携プレーの結果、 file1 の内容が　sort され、その後、一画面づつに区切られて出力されます．

　パイプ処理は何段にも重ねることができます． afile ファイルの中から "log" を含む行を選び出し、順番に並べ換え、一画面づつに表示するには次のようにします． 
</p>
<pre>
% grep "log" file1 | sort | less
</pre>
<p>
パイプライン処理の結果をリダイレクトによってファイルにすることもできます．
</p>
<pre>
% grep "log" file1 | sort  > file1.log
</pre>
<p>
　また、入力ファイル名を指定する代わりにリダイレクトによってファイルから入力することもできます．
</p>
<pre>
% grep "log" < file1 | sort  > file1.log
</pre>
<p>
　なお、パイプ記号 "|" の前後には空白を空けても空けなくても構いません．
</p>
<p>




<h3>C言語の文字入出力、条件分岐</h3>
ここでは、C言語で標準入出力をつかうプログラムを作成します。
UNIXの入出力リダイレクションの機能が使えることを確認します。

<h4>課題１</h4>
<p>教科書（プログラミング言語Ｃ）P20、
ファイルの複写（標準入力を標準出力へ）プログラムのソースコードを入力し、コンパイルせよ。<br>
　このプログラムはキーボードから入力された文字を、そのまま画面に出力するというものです。
EOF(ファイルの終わり)である ctrl-d を入力するまで処理を繰り返します。

実行のテストとして、様々な入出力のリダイレクションを試せ。<br>


<pre class="source">
#include &lt;stdio.h&gt;

/* 入力を出力に複写：第１版 */
main(){
  int c;

  c = getchar();
  while ( c!= EOF){
    putchar(c);
    c = getchar();
  }
}
</pre>
<p>
<strong>実行結果</strong><br>
<pre>
% ./a.out
abcdefg<font color="#ff2fad">[ENTER]</font> <font color="#adff2f"> ・・・キーボードでの入力 </font>
abcdefg
<font color="#adff2f">ctrl-d を入力(これはEOFを入力することとなる）</font>
%
</pre>
<p>
<strong>リダイレクションとの併用</strong>
<ol>
<li>標準出力の切り替え<br>
プログラム <tt>a.out</tt> の標準出力を、ファイル <tt>hoge</tt> に切り替えると、
入力文字列がファイルに記録されます。
<pre>
% ./a.out >hoge
abcdefg<font color="#ff2fad">[ENTER]</font> <font color="#adff2f"> ・・・キーボードでの入力 </font>
12345<font color="#ff2fad">[ENTER]</font> <font color="#adff2f"> ・・・キーボードでの入力 </font>
<font color="#adff2f">ctrl-d を入力</font>
%
</pre>
これで、入力文字列が <tt>hoge</tt> という名前のファイルに記録されます。 
<b>cat</b> コマンドで確認しましょう。
<pre>
% cat hoge
</pre>
</li>

<li>標準入力の切り替え<br>
プログラム <tt>a.out</tt> の標準入力を、ファイル <tt>hoge</tt> に切り替えると、入力文字列として <tt>hoge</tt> 
の内容を用います。結果として、ファイルの内容を出力する <b>cat</b> コマンドと同じような動作をすることになります。
<pre>
% ./a.out &lt;hoge
</pre>
<li>標準入力・出力の同時切り替え<br>
プログラム <tt>a.out</tt> の標準入力を、ファイル <tt>hoge</tt> に、標準出力を <tt>hoge2</tt> に切り替えます。
結果として、<tt>hoge</tt> の内容を入力し、それを <tt>hoge2</tt> に出力します。つまり、ファイルのコピーと同じような
動作をします。
<pre>
% ./a.out &lt;hoge &gt;hoge2
</pre>
</ol>


<h4>課題２</h4>
<p>　以下のソースコードは課題１のプログラムを少し修正たもので、数字の「0」が入力されたときは、
「0」の代わりに文字列「zero」を出力するようになっている。<br>
</p>
<pre class="source">
#include &lt;stdio.h&gt;

/* 入力を出力に複写、ただし「0」は「zero」と表示する */
main(){
  int c;

  c = getchar();
  while ( c!= EOF){
    if(c == '0')
      printf("zero");
    else
      putchar(c);
    c = getchar();
  }
}
</pre>

このソースコードをさらに修正して、「0」,「1」,「2」,...,「9」と入力されたときは、
それぞれ「zero」,「one」,「two」,... と表示するプログラムを作れ。


<h4>課題３</h4>
<p>　教科書P24 の、入力の行数を数えるプログラムと、課題２を参考にして、
入力された文字のなかに「0」が現れた回数を数えて出力するプログラムを作成せよ。
</p>


<h3>発展</h3>
<h4>課題４</h4>
<p>　課題３を修正することで、入力された文字のなかに「0」 から「9」までの各数字が現れた
回数をそれぞれ数えて出力するプログラムを作成せよ。教科書P27のソースコードも参考せよ。<br>
　また、動作確認として以下のファイル
<pre>
/homer/se/tea/okushima/Examples/random.dat
</pre>
<p>
の中に、それぞれの数字がいくつ含まれているかを調べなさい。<br>
<!-- 正しく動作していれば 0 から 9 までの出現個数はそれぞれ 43, 44, 29, 4, 4, 35, 0, 5, 0, 0 となる。 -->
<p><strong>課題４についてのヒント＆テクニック</strong>
<p> 課題４を完成させるには、<tt>if ~ else if ~ else  </tt>という構文を使う方法が分かりやすい。<br>
しかし以下のような、よりスマートな方法もある。<br>
一般にコンピュータにおける文字コードでは、（半角）数字の文字コードは 0~9 の順番に付けられている。
これを利用して入力文字が数字であるかどうかをテストできる。<b>if</b>文の条件として
<pre>
'0'<=c && c<='9'
</pre>
<p>とすれば、「cが数字のときには」という条件になる(&& は「かつ」ということ、すなわち '0'<=c と c<='9'が同時に成立するとき。
因みに「または」を表す際は || を用いる)<br>
ここで
<pre>
c-'0'
</pre>
<p>という式を使えば、数字の文字コードをその数に変換することができる（e.g. もし c='2' ならば c-'0' は 数値の2 に等しい)。

また、数字の個数のカウントには、<em>配列変数</em>を使うのが便利。


<!-- <h3>課題５</h3> -->
<!-- <p>　課題４を修正することで、入力された文字のなかで、もっとも現れた回数の多かった数字を出力 -->
<!-- するプログラムを作成せよ。 -->
<!-- ただし、もしそのような数字が２つ以上現れた場合は、それらの中の任意の数を出力してよいことにする。 -->
<!-- </p> -->

<!-- <h3>課題６（特別問題：やや難）</h3> -->
<!-- <p> 入力された文字のなかで 「10」が現れたときは 「ten」と出力するプログラムを作成せよ。</p> -->

<h3>今日の提出課題</h3>
プログラムのソースコードを印刷して提出すること。
この際、ソースコード内に作成者の名前をコメントとして含ませること。<br>
<p>(必須)課題2
<p>(任意)課題3
<p>(任意)課題４で作成したプログラムを用いて、ファイル</p>
<pre>
/homer/se/tea/okushima/Examples/random.dat
</pre>
<p>に出現する数字の個数を調べよ。
そしてプログラムのソースコードを印刷して提出すること。
この際、ソースコード内に作成者の名前をコメントとして含ませること。<br>
</p>

<p>
<strong>テキストファイルを印刷</strong>するには、
<pre>
% lp <i>filename</i>
</pre>
<p>
とすればよい。
</p>

<hr>
<A HREF="unix06.html">PREVIOUS</A> |
<A HREF="index.html">TOP</A> |
<A HREF="unix08.html">NEXT</A>

</body>

</html>
